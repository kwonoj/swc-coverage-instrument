# functions.yaml
---
name: function declaration assignment name (in function)
guard: isInferredFunctionNameAvailable
code: |
  function a () {
    const foo = function () {}
  }
  function b () {
    const bar = function () {}
    return bar.name
  }
  output = b()
tests:
  - name: properly sets function name
    out: 'bar'
    lines: {'2': 0, '5': 1, '6': 1, '8': 1}
    functions: {'0': 0, '1': 0, '2': 1, '3': 0}
    statements: {'0': 0, '1': 1, '2': 1, '3': 1}
    guard: isInferredFunctionNameAvailable

# function cov_qy2g7j67v() {
#   var path = "C:\\github\\istanbuljs\\packages\\istanbul-lib-instrument\\test\\util\\verif
#   var hash = "4fa384a41602c3074838feee5ce9b998e3524a13";
#   var global = new Function("return this")();
#   var gcv = "__testing_coverage__";
#   var coverageData = {
#     path: "C:\\github\\istanbuljs\\packages\\istanbul-lib-instrument\\test\\util\\verifier
#     statementMap: {
#       "0": {
#         start: {
#           line: 2,
#           column: 14
#         },
#         end: {
#           line: 2,
#           column: 28
#         }
#       },
#       "1": {
#         start: {
#           line: 5,
#           column: 14
#         },
#         end: {
#           line: 5,
#           column: 28
#         }
#       },
#       "2": {
#         start: {
#           line: 6,
#           column: 2
#         },
#         end: {
#           line: 6,
#           column: 17
#         }
#       },
#       "3": {
#         start: {
#           line: 8,
#           column: 0
#         },
#         end: {
#           line: 8,
#           column: 12
#         }
#       }
#     },
#     fnMap: {
#       "0": {
#         name: "a",
#         decl: {
#           start: {
#             line: 1,
#             column: 9
#           },
#           end: {
#             line: 1,
#             column: 10
#           }
#         },
#         loc: {
#           start: {
#             line: 1,
#             column: 14
#           },
#           end: {
#             line: 3,
#             column: 1
#           }
#         },
#         line: 1
#       },
#       "1": {
#         name: "(anonymous_1)",
#         decl: {
#           start: {
#             line: 2,
#             column: 14
#           },
#           end: {
#             line: 2,
#             column: 15
#           }
#         },
#         loc: {
#           start: {
#             line: 2,
#             column: 26
#           },
#           end: {
#             line: 2,
#             column: 28
#           }
#         },
#         line: 2
#       },
#       "2": {
#         name: "b",
#         decl: {
#           start: {
#             line: 4,
#             column: 9
#           },
#           end: {
#             line: 4,
#             column: 10
#           }
#         },
#         loc: {
#           start: {
#             line: 4,
#             column: 14
#           },
#           end: {
#             line: 7,
#             column: 1
#           }
#         },
#         line: 4
#       },
#       "3": {
#         name: "(anonymous_3)",
#         decl: {
#           start: {
#             line: 5,
#             column: 14
#           },
#           end: {
#             line: 5,
#             column: 15
#           }
#         },
#         loc: {
#           start: {
#             line: 5,
#             column: 26
#           },
#           end: {
#             line: 5,
#             column: 28
#           }
#         },
#         line: 5
#       }
#     },
#     branchMap: {},
#     s: {
#       "0": 0,
#       "1": 0,
#       "2": 0,
#       "3": 0
#     },
#     f: {
#       "0": 0,
#       "1": 0,
#       "2": 0,
#       "3": 0
#     },
#     b: {},
#     _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
#     hash: "4fa384a41602c3074838feee5ce9b998e3524a13"
#   };
#   var coverage = global[gcv] || (global[gcv] = {});
#
#   if (!coverage[path] || coverage[path].hash !== hash) {
#     coverage[path] = coverageData;
#   }
#
#   var actualCoverage = coverage[path];
#   {
#     // @ts-ignore
#     cov_qy2g7j67v = function () {
#       return actualCoverage;
#     };
#   }
#   return actualCoverage;
# }
#
# cov_qy2g7j67v();
#
# function a() {
#   cov_qy2g7j67v().f[0]++;
#   cov_qy2g7j67v().s[0]++;
#
#   const foo = function () {
#     cov_qy2g7j67v().f[1]++;
#   };
# }
#
# function b() {
#   cov_qy2g7j67v().f[2]++;
#   cov_qy2g7j67v().s[1]++;
#
#   const bar = function () {
#     cov_qy2g7j67v().f[3]++;
#   };
#
#   cov_qy2g7j67v().s[2]++;
#   return bar.name;
# }
#
# cov_qy2g7j67v().s[3]++;
# output = b();